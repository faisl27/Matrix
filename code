import math
from math import sqrt
import numbers

def zeroes(height, width):
        """
        Creates a matrix of zeroes.
        """
        g = [[0.0 for _ in range(width)] for __ in range(height)]
        return Matrix(g)

def identity(n):
        """
        Creates a n x n identity matrix.
        """
        I = zeroes(n, n)
        for i in range(n):
            I.g[i][i] = 1.0
        return I

class Matrix(object):

    # Constructor
    def __init__(self, grid):
        self.g = grid
        self.h = len(grid)
        self.w = len(grid[0])

    #
    # Primary matrix math methods
    #############################
 
    def determinant(self):
        """
        Calculates the determinant of a 1x1 or 2x2 matrix.
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate determinant of non-square matrix.")
        if self.h > 2:
            raise(NotImplementedError, "Calculating determinant not implemented for matrices largerer than 2x2.")
        
        # 1 x 1 Matrix
        if self.h == 1:
            #return the only value in the matrix
            return self.g[0][0]
        
        # 2 x 2 Matrix:
        if self.h == 2:
            #doing  determinant = a * d - b * c
            return self.g[0][0]*self.g[1][1] - self.g[0][1]*self.g[1][0]

        
    def trace(self):
        """
        Calculates the trace of a matrix (sum of diagonal entries).
        """
        if not self.is_square():
            raise(ValueError, "Cannot calculate the trace of a non-square matrix.")
        t = 0
        #looping on the diagonal by getting the index which always the same in 2d matrix
        return sum([self.g[i][i] for i in range(self.h)])
        
   
    def inverse(self):
        """
        Calculates the inverse of a 1x1 or 2x2 Matrix.
        """
        
        if not self.is_square():
            raise(ValueError, "Non-square Matrix does not have an inverse.")
        if self.h > 2:
            raise(NotImplementedError, "inversion not implemented for matrices larger than 2x2.")

        if self.w == 1:
            # put the value of the matrix (1/value)
            return Matrix([[1/self.determinant()]])     #Matrix([[1/self.g[0][0]]])
        if self.w == 2:
            # equation from matrix_cheat_sheet.ipynb
            
            #cople of steps here:
            # we created zeroes matrix
            #we are calling the determinant method with each value and divided with the
            #determinant
            # then we subtituted on the zeroes matrix but inversitng the postions   
#             invMat = zeroes(self.w, self.h)
#             invMat[0][0] = self.g[1][1] * (1/self.determinant())
#             invMat[0][1] = -self.g[0][1] * (1/self.determinant())
#             invMat[1][0] = -self.g[1][0] * (1/self.determinant())
#             invMat[1][1] = self.g[0][0] * (1/self.determinant())
            
           return 1.0 / self.determinant() * (self.trace() * identity(self.w) - self)

    def T(self):
        """
        Returns a transposed copy of this Matrix.
        """
        # creates a self.h x self.w matrix of zeroes
        grid = zeroes(self.w, self.h)
        
#         traverse each element in matrix 
#         check how many rows
        for row in range(self.h):
            #check for the colums
            for col in range(self.w):
                #change the postion of the rows to be a colums
                grid[col][row] = self.g[row][col]
        return grid

    def is_square(self):
        return self.h == self.w

    #
    # Begin Operator Overloading
    ############################
    def __getitem__(self,idx):
        """
        Defines the behavior of using square brackets [] on instances
        of this class.
        Example:
        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > my_matrix[0]
          [1, 2]
        > my_matrix[0][0]
          1
        """
        return self.g[idx]

    def __repr__(self):
        """
        Defines the behavior of calling print on an instance of this class.
        """
        s = ""
        for row in self.g:
            s += " ".join(["{} ".format(x) for x in row])
            s += "\n"
        return s

    def __add__(self,other):
        """
        Defines the behavior of the + operator
        """
        
        # error checking
        if self.h != other.h or self.w != other.w:
            raise(ValueError, "Matrices can only be added if the dimensions are the same") 
        
        # creates a self.h x self.w matrix of zeroes
        grid = zeroes(self.h, self.w)

        # traverse each element in matrix
        for row in range(self.h):
            #looping to add both values from the two matrixes to grid matrix
            for col in range(self.w):
                grid[row][col] = self.g[row][col] + other.g[row][col]
        return grid


    def __neg__(self):
        """
        Defines the behavior of - operator (NOT subtraction)
        Example:
        > my_matrix = Matrix([ [1, 2], [3, 4] ])
        > negative  = -my_matrix
        > print(negative)
          -1.0  -2.0
          -3.0  -4.0
        """
        # creates a self.h x self.w matrix of zeroes
        grid = zeroes(self.h, self.w)
        
        # traverse each element in matrix
        for r in range(self.h):
            for c in range(self.w):
                 grid[r][c] = self.g[r][c]*-1.0
        return grid
                

    def __sub__(self, other):
        """
        Defines the behavior of - operator (as subtraction)
        """
        # creates a self.h x self.w matrix of zeroes
        grid = zeroes(self.h, self.w)
        
        # traverse each element in matrix
#         for r in range(self.h):
#             for c in range(self.w):
#                 grid[r][c] = self.g[r][c]-other.g[r][c]
        return (self + -other)
            
            
    def __mul__(self, other):
        """
        Defines the behavior of * operator (matrix multiplication)
        """
        # creates a self.h x other.w matrix of zeroes
        # grid will store the result
        grid = zeroes(self.h, other.w)
        #looping 
        for row in range(self.h):
            for col in range(other.w):
                # after multiplication we add the value to the grid 
                for rowOth in range(other.h):
                    
                    grid[row][col] += self.g[row][rowOth] * other.g[rowOth][col]
        return grid
       
        
    def __rmul__(self, other):
        """
        Called when the thing on the left of the * is not a matrix.
        Example:
        > identity = Matrix([ [1,0], [0,1] ])
        > doubled  = 2 * identity
        > print(doubled)
          2.0  0.0
          0.0  2.0
        """
        #chech other to be int
        if isinstance(other, numbers.Number):
            grid = self
            for row in range(self.h):
                for col in range(self.w):
                    #multiply all values with other integer
                    grid[row][col] *= other
            return grid
